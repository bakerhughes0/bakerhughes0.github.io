<html>
<head>
<script type=text/javascript src=js/func.js?v=001></script>
<script type=text/javascript src=js/canvasjs.min.js?v=007></script>
<script type=text/javascript src=module.js?v=003></script>
<script type=text/javascript>

function refreshall(){
  gfx0.render();gfx1.render();gfx2.render();gfx3.render();gfx4.render();gfx5.render();gfx6.render();gfx7.render();gfx8.render();
  }

function loadData(){
  var d = new Date();
  var sd = d.getUTCFullYear() + '-' + (d.getUTCMonth() + 1) + '-' + d.getUTCDate() + ' ' +  d.getUTCHours() + ':' + d.getUTCMinutes();
  var js = document.createElement('script');
  js.type='text/javascript';
  js.src="kpi2.js" + "?d=" + sd;
  var weektoshow = 20;
  document.head.appendChild(js);    
  js.onload = function(){
    for(var n=0; n<3; n++){
      gfx0.options.data[n].dataPoints=[];
      }
    min_pending = bklog.p[bklog.dates.length-1];
    for(var n=0;n<bklog.dates.length;n++){
      gfx0.options.data[0].dataPoints.push({label:bklog.dates[n], y:bklog.p[n]})
      gfx0.options.data[1].dataPoints.push({label:bklog.dates[n], y:bklog.b[n]})
      gfx0.options.data[2].dataPoints.push({label:bklog.dates[n], y:bklog.s[n]})
      if(bklog.p[n]>0) min_pending = Math.min(min_pending, bklog.p[n]);
      }
    gfx0.options.axisY.minimum=min_pending * .99;
    for(var n=0;n<5;n++){ gfx3.options.data[n].dataPoints=[];}
    for(var n=0;n<unclean.dates.length;n++){
      gfx3.options.data[0].dataPoints.push({label:unclean.dates[n], y:unclean.a[n]})
      gfx3.options.data[1].dataPoints.push({label:unclean.dates[n], y:unclean.b[n]})
      gfx3.options.data[2].dataPoints.push({label:unclean.dates[n], y:unclean.c[n]})
      gfx3.options.data[3].dataPoints.push({label:unclean.dates[n], y:unclean.d[n]})
      gfx3.options.data[4].dataPoints.push({label:unclean.dates[n], y:unclean.e[n]})
      }
    gfx1.options.data[0].dataPoints=[];
    for(var n=0;n<top_ovd_com.so.length;n++){
      gfx1.options.data[0].dataPoints.push({name:top_ovd_com.so[n], y:top_ovd_com.usd[n], x:top_ovd_com.days[n], z:top_ovd_com.usd[n]})
      }
    gfx2.options.data[0].dataPoints=[];
    for(var n=0;n<top_ovd_nuc.so.length;n++){
      gfx2.options.data[0].dataPoints.push({name:top_ovd_nuc.so[n], y:top_ovd_nuc.usd[n], x:top_ovd_nuc.days[n], z:top_ovd_nuc.usd[n]})
      }
    for(var n=0;n<4;n++){ gfx4.options.data[n].dataPoints=[];}
    for(var n=0;n<prdlate.dates.length;n++){
      gfx4.options.data[0].dataPoints.push({label:prdlate.dates[n], y:prdlate.c[n]})
      gfx4.options.data[1].dataPoints.push({label:prdlate.dates[n], y:prdlate.v[n]})
      gfx4.options.data[2].dataPoints.push({label:prdlate.dates[n], y:prdlate.g[n]})
      gfx4.options.data[3].dataPoints.push({label:prdlate.dates[n], y:prdlate.l[n]})
      }
    for(var n=0;n<3;n++){ gfx5.options.data[n].dataPoints=[];}
    cum=0; cq=''
    for(var n=0;n<slot_plan.w.length;n++){
      if(cq!=slot_plan.q[n]){cq=slot_plan.q[n]; cum=0;}
      cum+=slot_plan.c[n];
      gfx5.options.data[0].dataPoints.push({label:slot_plan.w[n], y:slot_plan.c[n]})
      gfx5.options.data[2].dataPoints.push({label:slot_plan.w[n], y:cum})
      }
    for(var n=0;n<3;n++){ gfx6.options.data[n].dataPoints=[];}
    cum=0; cq=''
    for(var n=0;n<slot_plan.w.length;n++){
      if(cq!=slot_plan.q[n]){cq=slot_plan.q[n]; cum=0;}
      cum+=slot_plan.v[n];
      gfx6.options.data[0].dataPoints.push({label:slot_plan.w[n], y:slot_plan.v[n]})
      gfx6.options.data[2].dataPoints.push({label:slot_plan.w[n], y:cum})
      }
    for(var n=0;n<3;n++){ gfx7.options.data[n].dataPoints=[];}
    cum=0; cq=''
    for(var n=0;n<slot_plan.w.length;n++){
      if(cq!=slot_plan.q[n]){cq=slot_plan.q[n]; cum=0;}
      cum+=slot_plan.g[n];
      gfx7.options.data[0].dataPoints.push({label:slot_plan.w[n], y:slot_plan.g[n]})
      gfx7.options.data[2].dataPoints.push({label:slot_plan.w[n], y:cum})
      }
    for(var n=0;n<3;n++){ gfx8.options.data[n].dataPoints=[];}
    cum=0; cq=''
    for(var n=0;n<slot_plan.w.length;n++){
      if(cq!=slot_plan.q[n]){cq=slot_plan.q[n]; cum=0;}
      cum+=slot_plan.l[n];
      gfx8.options.data[0].dataPoints.push({label:slot_plan.w[n], y:slot_plan.l[n]})
      gfx8.options.data[2].dataPoints.push({label:slot_plan.w[n], y:cum})
      }
    refreshall();
    sTxt(timstp,'Update : ' + tm);
    }


  setTimeout(loadData, 60000);
  }

window.onload=function(){
  var bg = new background();
  t1=new xLab();sFtC(t1,'#ccc');sPar(t1,0);
  t2=new xLab();sFtC(t2,'#ccc');sPar(t2,0);sFtA(t2,'right');
  sTxt(t1,"CONDE MATERIALS KPI - MASTER SCHEDULER");
  sTxt(t2,"");
  timstp=new xLab();sPar(timstp,main);sFtC(timstp,'#666');
  var g = [];
  for(var n=0; n<9; n++){g[n] = new gfxbox();}
  var axeY_1 = {
    title: "USD",
    valueFormatString: "# ### ##0",
    titleFontColor: "#ddd",
    titleFontSize: 15,
    labelFontColor: "#ddd",
    labelFontFamily: 'Arial',
    labelFontSize: 12,
    }
  var axeY_2 = [{
    labelFontColor: "#8b9",
    labelFontFamily: 'Arial',
    labelFontSize: 10,minimum:0,
    },
   {title: "Products", titleFontColor: "#eee",     titleFontSize: 12, labelFontColor: "#efe", labelFontFamily: 'Arial', labelFontSize: 10, minimum:0} ];

  var axeX_1 = {labelFontColor: "#eee", interval: 1, labelAngle: -32, labelFontFamily: 'Arial'}
  var axeX_2 = {labelFontColor: "#eee", interval: 2, labelAngle: -62, labelFontFamily: 'Arial'}
  var leg_1 = {horizontalAlign: "center", verticalAlign: "bottom", labelFontFamily: 'Arial', fontColor: "#eee"}
  var ttip1 = {shared: true, backgroundColor: '#cdc', borderColor:'grey', content: toolTipContentMS};
  var ttip2 = {shared: true, backgroundColor: '#cdc', borderColor:'grey'};
  gfx0 = new CanvasJS.Chart(g[0], {
  animationEnabled: true,
  animationDuration: 500,
  title: {text: "BACKLOG EVOLUTION", fontSize:18, fontColor:"#ddd",fontFamily: 'Arial'},
  backgroundColor: null,
  dataPointMaxWidth: 16,
  legend:leg_1,
  axisY:axeY_1,
  axisX:axeX_1,
  toolTip:ttip1,
  data: [              
    { type: "stackedColumn", name: "Pending", color: "#da5", dataPoints: [], showInLegend: true },
    { type: "stackedColumn", name: "Booking", color: "#aae", dataPoints: [], showInLegend: true },
    { type: "stackedColumn", name: "Shipping", color: "#8C8", dataPoints: [], showInLegend: true },
    ]
  });
  gfx1 = new CanvasJS.Chart(g[1], {
  animationEnabled: true,
  animationDuration: 500,
  title: {text: "TOP 10 OVERDUE", fontSize:18, fontColor:"#ddd",fontFamily: 'Arial'},
  subtitles: [{text: "Commercial", fontSize:14, fontColor:"#ddd",fontFamily: 'Arial'}],
  backgroundColor: null,
  legend:leg_1,
  axisY:{
    title:"USD",
    valueFormatString: "# ### ##0 $",
    titleFontColor: "#eee",
    lineColor:'#aaa', lineThickness: 1,
    gridColor:'#aaa', gridThickness: 1,
    labelFontColor: "#eee",
    labelFontFamily: 'Arial',
    labelFontSize: 8,
    titleFontFamily: 'Arial',
    titleFontSize: 12,
    },
  axisX:{
    title:"days",
    titleFontColor: "#eee",
    lineColor:'#aaa', lineThickness: 1,
    gridColor:'#aaa', gridThickness: 1,
    labelFontColor: "#eee",
    labelFontFamily: 'Arial',
    labelFontSize: 8,
    titleFontFamily: 'Arial',
    titleFontSize: 12,
    },
  data: [              
    { type: "bubble", dataPoints: [],
      toolTipContent: "<b>{name}</b><br/>Amount : {y} $<br/> Max. overdue line : {x} days<br/>",
      }
    ]
  });

  gfx2 = new CanvasJS.Chart(g[2], {
  animationEnabled: true,
  animationDuration: 500,
  title: {text: "TOP 10 OVERDUE", fontSize:18, fontColor:"#ddd",fontFamily: 'Arial'},
  subtitles: [{text: "Nuclear", fontSize:14, fontColor:"#ddd",fontFamily: 'Arial'}],
  backgroundColor: null,
  legend:leg_1,
  axisY:{
    title:"USD",
    valueFormatString: "# ### ##0 $",
    titleFontColor: "#eee",
    lineColor:'#aaa', lineThickness: 1,
    gridColor:'#aaa', gridThickness: 1,
    labelFontColor: "#eee",
    labelFontFamily: 'Arial',
    labelFontSize: 8,
    titleFontFamily: 'Arial',
    titleFontSize: 12,
    },
  axisX:{
    title:"days",
    titleFontColor: "#eee",
    lineColor:'#aaa', lineThickness: 1,
    gridColor:'#aaa', gridThickness: 1,
    labelFontColor: "#eee",
    labelFontFamily: 'Arial',
    labelFontSize: 8,
    titleFontFamily: 'Arial',
    titleFontSize: 12,
    },
  data: [              
    { type: "bubble", dataPoints: [],
      toolTipContent: "<b>{name}</b><br/>Amount : {y} $<br/> Max. overdue line : {x} days<br/>",
      }
    ]
  });

  gfx3 = new CanvasJS.Chart(g[3], {
  animationEnabled: true,
  animationDuration: 500,
  title: {text: "UNCLEAN AGE", fontColor:"#ddd",fontFamily: 'Arial',fontSize:16},
  subtitles: [{text: "based on OMEB", fontSize:10, fontColor:"#ddd",fontFamily: 'Arial'}],
  backgroundColor: null,
  dataPointMaxWidth: 16,
  legend:{horizontalAlign: "center", verticalAlign: "bottom", labelFontFamily: 'Arial', fontColor: "#eee"},
  axisY:{title: "Line items", titleFontColor: "#eee", labelFontColor: "#eee", labelFontFamily: 'Arial', minimum:0},
  axisX:{labelFontColor: "#eee", interval: 1, labelAngle: -32, labelFontFamily: 'Arial'},
  toolTip:{shared: true, backgroundColor: '#cdc', borderColor:'grey', content: toolTipContentMS},
  data: [              
    { type: "stackedColumn", name: "< 1w", color: "#895", dataPoints: [], showInLegend: true },
    { type: "stackedColumn", name: "< 2w", color: "#B95", dataPoints: [], showInLegend: true },
    { type: "stackedColumn", name: "< 4w", color: "#A74",  dataPoints: [], showInLegend: true },
    { type: "stackedColumn", name: "< 8w", color: "#B52", dataPoints: [], showInLegend: true },
    { type: "stackedColumn", name: "> 8w", color: "#A31",  dataPoints: [], showInLegend: true },
    ]
  });

  gfx4 = new CanvasJS.Chart(g[4], {
  animationEnabled: true,
  animationDuration: 1500,
  title: {text: "OVERDUE ITEMS", fontColor:"#ddd",fontFamily: 'Arial',fontSize:16},
  backgroundColor: null,
  dataPointMaxWidth: 16,
  legend: {
    horizontalAlign: "center",
    verticalAlign: "bottom",
    labelFontFamily: 'Arial',
    fontColor: "#eee"
    },
  axisY:{
    title: "Line Items",
    titleFontColor: "#eee",
    labelFontColor: "#eee",
    labelFontFamily: 'Arial',
    },
  axisX:{
    labelFontColor: "#eee",
    interval: 1,
    labelAngle: -36,
    labelFontFamily: 'Arial',
    },
  toolTip: {shared: true, content: toolTipContent6},
  data: [              
    { type: "stackedColumn", name: "Camflex", showInLegend: true,color:"#f69",  dataPoints: [] },
    { type: "stackedColumn", name: "Varipak", showInLegend: true,color:"#888",  dataPoints: [] },
    { type: "stackedColumn", name: "Globes", showInLegend: true,color:"#900",  dataPoints: [] },
    { type: "stackedColumn", name: "Levels", showInLegend: true,color:"#00C",  dataPoints: [] },
    ]
  });




  gfx5 = new CanvasJS.Chart(g[5], {
  animationEnabled: true,
  animationDuration: 500,
  title: {text: "SLOT PLAN CAMFLEX", fontSize:18, fontColor:"#ddd",fontFamily: 'Arial'},
  backgroundColor: null,
  dataPointMaxWidth: 3,
  legend:leg_1,
  axisY:axeY_2,
  axisX:axeX_2,
  toolTip:ttip2,
  data: [              
    { type: "stackedColumn", name: "Plan", color: "#8b9", dataPoints: [], showInLegend: true },
    { type: "stackedColumn", name: "Engr", color: "#c84", dataPoints: [], showInLegend: true },
    { type: "line", lineThickness:1, name: "Quarter Cumulative", color: "#efe", dataPoints: [], showInLegend: true, axisYIndex: 1 },
    ]
  });
  gfx6 = new CanvasJS.Chart(g[6], {
  animationEnabled: true,
  animationDuration: 500,
  title: {text: "SLOT PLAN VARIPAK", fontSize:18, fontColor:"#ddd",fontFamily: 'Arial'},
  backgroundColor: null,
  dataPointMaxWidth: 3,
  legend:leg_1,
  axisY:axeY_2,
  axisX:axeX_2,
  toolTip:ttip1,
  data: [              
    { type: "stackedColumn", name: "Plan", color: "#8b9", dataPoints: [], showInLegend: true },
    { type: "stackedColumn", name: "Engr", color: "#c84", dataPoints: [], showInLegend: true },
    { type: "line", lineThickness:1,name: "Quarter Cumulative", color: "#efe", dataPoints: [], showInLegend: true, axisYIndex: 1 },
    ]
  });
  gfx7 = new CanvasJS.Chart(g[7], {
  animationEnabled: true,
  animationDuration: 500,
  title: {text: "SLOT PLAN GLOBES", fontSize:18, fontColor:"#ddd",fontFamily: 'Arial'},
  backgroundColor: null,
  dataPointMaxWidth: 3,
  legend:leg_1,
  axisY:axeY_2,
  axisX:axeX_2,
  toolTip:ttip1,
  data: [              
    { type: "stackedColumn", name: "Plan", color: "#8b9", dataPoints: [], showInLegend: true },
    { type: "stackedColumn", name: "Engr", color: "#c84", dataPoints: [], showInLegend: true },
    { type: "line", lineThickness:1,name: "Quarter Cumulative", color: "#efe", dataPoints: [], showInLegend: true, axisYIndex: 1 },
    ]
  });
  gfx8 = new CanvasJS.Chart(g[8], {
  animationEnabled: true,
  animationDuration: 500,
  title: {text: "SLOT PLAN LEVELS", fontSize:18, fontColor:"#ddd",fontFamily: 'Arial'},
  backgroundColor: null,
  dataPointMaxWidth: 3,
  legend:leg_1,
  axisY:axeY_2,
  axisX:axeX_2,
  toolTip:ttip1,
  data: [              
    { type: "stackedColumn", name: "Plan", color: "#8b9", dataPoints: [], showInLegend: true },
    { type: "stackedColumn", name: "Engr", color: "#c84", dataPoints: [], showInLegend: true },
    { type: "line",lineThickness:1, name: "Quarter Cumulative", color: "#efe", dataPoints: [], showInLegend: true, axisYIndex: 1 },
    ]
  });

  window.onresize=function(){
    movep(bg,[0,0,1,1]);
    movep(t1,[.01, .01, .98, .045]);
    movep(t2,[.01, .01, .98, .045]);
    movep(timstp,[.01, .97, 1, .03]);
    pos = [0, 2, 3, 1, 4, 8,9,10,11];
    for(var n=0; n<9; n++){
      x = pos[n] % 4;
      y = Math.floor(pos[n]/4);
      movep(g[n],[.01+x*.2475, .07+y*.3, .2375, .29]);
      refreshall();
      }
    };window.onresize();

  loadData();
  }

function fmtCur2(num) {
 var a=parseFloat(num).toFixed(0);
 return a.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1 ');
 }

function toolTipContentMS(e) {
  var str = "";
  var total = 0;
  var str2, str3;
  for (var i = 0; i < e.entries.length; i++){
    var  str1 = "<span style= \"color:"+e.entries[i].dataSeries.color + "\"> "+e.entries[i].dataSeries.name+"</span>: <strong>"+fmtCur2(e.entries[i].dataPoint.y)+"</strong><br/>";
    if(e.entries[i].dataSeries.name!='Shipping' && e.entries[i].dataSeries.name!='Capacity'){ total += e.entries[i].dataPoint.y;}
    str = str.concat(str1);
    }
  str2 = "<span style = \"color:#050;\"><strong>"+(e.entries[0].dataPoint.label)+"</strong></span><br/>";
  total = Math.round(total * 100) / 100;
  str3 = "<span style = \"color:#050\">Total:</span><strong> "+fmtCur2(total)+"</strong><br/>";
  return (str2.concat(str)).concat(str3);
  } 

</script>
</head>
<body >
</body>
</html>